/*
 * Copyright (c) 2015 - 2018
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package jsettlers.textures.generation;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;

/**
 * This is a index where textures can be registered
 *
 * @author michael
 */
public class TextureIndex {
	private final Object imageIndexMutex = new Object();
	private final Object textureCounterMutex = new Object();
	private final Hashtable<String, Integer> imageIndexes = new Hashtable<>();

	private final File generatedResourcesDirectory;
	private final File generatedSourcesDirectory;

	private int textureCounter = 0;
	private int imageIndexCounter;

	private DataOutputStream textureIndexOut;
	private PrintWriter textureConstantsOut;

	public TextureIndex(File generatedResourcesDirectory, File generatedSourcesDirectory) {
		this.generatedResourcesDirectory = generatedResourcesDirectory;
		this.generatedSourcesDirectory = generatedSourcesDirectory;
	}

	public void openTextureIndex() throws IOException {
		generatedResourcesDirectory.mkdirs();
		textureIndexOut = new DataOutputStream(new FileOutputStream(new File(generatedResourcesDirectory, "texturemap")));
		textureIndexOut.write(new byte[] { 'T', 'E', 'X', '1' });

		generatedSourcesDirectory.mkdirs();
		textureConstantsOut = new PrintWriter(new File(generatedSourcesDirectory, "TextureMap.java"));
		textureConstantsOut.println("package jsettlers.common.images;");
		textureConstantsOut.println("import java.util.Arrays;");
		textureConstantsOut.println();
		textureConstantsOut.println("// DO NOT EDIT THIS FILE, IT IS GENERATED");
		textureConstantsOut.println();
		textureConstantsOut.println("public final class TextureMap {");
		textureConstantsOut.println("	private TextureMap() {}");
		textureConstantsOut.println();

		textureConstantsOut.println("	public static int getIndex(String name) {");
		textureConstantsOut.println("		int arrindex = Arrays.binarySearch(names, name);");
		textureConstantsOut.println("		if (arrindex < 0) {");
		textureConstantsOut.println("			throw new IllegalArgumentException(\"Could not find \" + name + \" in image map.\");");
		textureConstantsOut.println("		}");
		textureConstantsOut.println("		return indexes[arrindex];");
		textureConstantsOut.println("	}");
		textureConstantsOut.println();
		System.out.println("Opened texture index");
	}

	public int registerTexture(String name, int textureFile, int offsetX, int offsetY, int width, int height, Integer torsoIndex, boolean isTorso, TexturePosition position) throws IOException {
		synchronized (imageIndexMutex) {
			String safename = name.replaceAll("[^a-zA-Z0-9._]", "_");

			imageIndexes.put(safename, imageIndexCounter);

			textureIndexOut.writeShort(offsetX);
			textureIndexOut.writeShort(offsetY);
			textureIndexOut.writeShort(width);
			textureIndexOut.writeShort(height);
			textureIndexOut.writeShort(textureFile);
			textureIndexOut.writeInt(torsoIndex == null ? -1 : torsoIndex);
			textureIndexOut.writeShort(isTorso ? 1 : 0);

			textureIndexOut.writeShort(toShort(position.getLeft()));
			textureIndexOut.writeShort(toShort(position.getTop()));
			textureIndexOut.writeShort(toShort(position.getRight()));
			textureIndexOut.writeShort(toShort(position.getBottom()));

			System.out.println("Added image " + imageIndexCounter + " to texture " + textureFile + " and added to constant index as " + safename);

			return imageIndexCounter++;
		}
	}

	public void closeTextureIndex() throws IOException {
		ArrayList<String> sortedIndexes = new ArrayList<>(imageIndexes.keySet());
		Collections.sort(sortedIndexes);

		textureIndexOut.close();
		textureConstantsOut.println("	private static final String[] names = new String[] {");
		for (String n : sortedIndexes) {
			textureConstantsOut.println("		\"" + n + "\",");
		}
		textureConstantsOut.println("	};");

		textureConstantsOut.println("	private static final int[] indexes = new int[] {");
		for (String n : sortedIndexes) {
			textureConstantsOut.println("		" + imageIndexes.get(n) + ",");
		}
		textureConstantsOut.println("	};");

		textureConstantsOut.println("}");
		textureConstantsOut.close();

		System.out.println("Closed texture index");
	}

	private static int toShort(float left) {
		return (int) (left * 0x7fff);
	}

	public int getNextTextureIndex() {
		synchronized (textureCounterMutex) {
			return textureCounter++;
		}
	}
}
